namespace davecommon
{
    enum TokenType
    {
        Comment,
        Documentation,
        String,

        Import,
        Namespace,
        Using,
        
        OpenBrace,
        CloseBrace,
        Semicolon,
        Dot,
        Comma,

        Error
    };

    pattern identifier                  = '[a-zA-Z_][a-zA-Z_0-9]*';
    pattern string                      = '"([^"]||(\\.)*"';
    pattern char                        = '\'([^\']||(\\.)*\'';
    pattern documentation               = '///(\n)|([^/][^\n]*\n)';
    pattern integer                     = '(+|-)?0|([1-9]\d+)';
    pattern hex                         = '[a-fA-F0-9]';

    pattern singleLineComment           = '//[^\n]*\n';

    // Multi-line comment
    pattern multiLineCommentStart       = '/\*';
    pattern multiLineCommentContent     = '([^\*]+)|(\*[^/])';
    pattern multiLineCommentReturn      = '\*/';

    abstract class Tag { Span Spn };
    class TokenTag : Tag { TokenType Token };
    class ValueTokenTag<T> : TokenTag { T Value };

    enum RegionType 
    {
        Brace,
        Bracket,
        Parenthesis
    };
    class RegionTag : Tag
    {
        bool Start,
        RegionType RegionType
    };

    enum BraceType
    {
        Brace,
        Bracket,
        Parenthesis
    };
    class BraceTag : Tag 
    {
        bool Start,
        BraceType BraceType
    };
    class KeywordTag : Tag;
    class StringTag : Tag;

    let emtpy (value:string) (spn:span) : Tag[] = [ ];
    let keyword tokenType (value:string) (spn:span) = [ KeywordTag { Spn = spn }, TokenTag { Spn = spn, Token = tokenType } ];
    let value tokenType factory (value:string) (spn:span) = [ ValueTokenTag { Spn = spn, Value = factory value, Token = tokenType }];
    let token tokenType (value:string) (spn:span) = [ TokenTag { Spn = spn, Token = tokenType } ];
    let regionStart regionType factory (value:string) (spn:span) = append (factory value spn) RegionTag { Start=true, Spn = spn, RegionType = regionType };
    let regionEnd regionType factory (value:string) (spn:span) = append (factory value spn) RegionTag { Start=false, Spn = spn, RegionType = regionType };
    let braceOpen braceType factory (value:string) (spn:span) = append (factory value spn) BraceTag { Start=true, Spn = spn, BraceType = braceType };
    let braceClose braceType factory (value:string) (spn:span) = append (factory value spn) BraceTag { Start=false, Spn = spn, BraceType = braceType };
    
    automata multiLineComment
    {
        '{multiLineCommentReturn}' return -> value TokenType.Comment id;
        '{multiLineCommentContent}'       -> value TokenType.Comment id;
    };

    set whitespace
    {
        '\s+'                                   -> empty;
        '{singleLineComment}'                   -> value TokenType.Comment id;
        '{multiLineCommentStart}'
            goto mulitiLineComment              -> value TokenType.Comment id;
    };

    // common document patterns - Include this as the final set
    set document
    {
        // keywords
        'import'                                -> keyword TokenType.Import;
        'namespace'                             -> keyword TokenType.Namespace;
        'using'                                 -> keyword TokenType.Using;
        
        // punctuation
        '\{'                                    -> token TokenType.OpenBrace |> braceOpen BraceType.Brace |> regionStart RegionType.Brace;
        '\}'                                    -> token TokenType.CloseBrace |> braceClose BraceType.Brace |> regionEnd RegionType.Brace;
        ';'                                     -> token TokenType.Semicolon;
        '\.'                                    -> token TokenType.Dot;
        ','                                     -> token TokenType.Comma;
        '='                                     -> token TokenType.Equal;

        include whitespace;
        '{documentation}'                       -> token TokenType.Documentation;
        '{string}'                              -> token TokenType.String;
        '@?{identifier}'                        -> value TokenType.Identifier id;
        '.'                                     -> value TokenType.Error;
    };
};
