import "..\common\common.dl";

namespace davescript
{
    using namespace davecommon;

    extend enum davecommon.RegionType
    {
        Triangle
    };

    extend enum davecommon.BraceType
    {
        Triangle
    };

    extend enum davecommon.TokenType
    {
        OpenBracket,
        CloseBracket,
        OpenParenthesis,
        CloseParenthesis,
        Equal,
        PipeForward,
        PipeBackward,
        ComposeForward,
        ComposeBackward,
        TextTemplateStart,
        TextTemplateEnd,
        TextTemplateExpressionStart,
        TextTemplateExpressionEnd,
        TextTemplateText,
        Type,
        Union,
        OpenTriangle,
        CloseTriangle,
        TypeString,
        TypeChar,
        TypeInt,
        Let,
        Char
    };

    // Include this set into a new automata with only a return statement
    set expression
    {
        '\[' goto iexpression1                  -> token TokenType.OpenBracket |> regionStart RegionType.Bracket |> openBrace BraceType.Bracket;
        '\{' goto iexpression2                  -> token TokenType.OpenBrace |> regionStart RegionType.Brace |> openBrace BraceType.Brace;
        '\(' goto iexpression3                  -> token TokenType.OpenParenthesis |> regionStart RegionType.Parenthesis |> openBrace BraceType.Parenthesis;
        '='                                     -> token TokenType.Equal;
        '|>'                                    -> token TokenType.PipeForward;
        '<|'                                    -> token TokenType.PipeBackward;
        '~>'                                    -> token TokenType.ComposeForward;
        '<~'                                    -> token TokenType.ComposeBackward;
        '<"' goto texttemplate                  -> token TokenType.TextTemplateStart;
        ';'                                     -> token TokenType.Semicolon;
        '\.'                                    -> token TokenType.Dot;
        ','                                     -> token TokenType.Comma;

        '{char}'                                -> token TokenType.Char;

        include davecommon.whitespace;
    };

    automata iexpression1
    {
        '\]' return                               -> token TokenType.CloseBracket |> regionEnd RegionType.Bracket |> closeBrace BraceType.Bracket;
        include expression;
    };

    automata iexpression2
    {
        '\}' return                               -> token TokenType.CloseBrace |> regionEnd RegionType.Brace |> closeBrace BraceType.Brace;
        include expression;
    };

    automata iexpression3
    {
        '\)' return                               -> token TokenType.CloseParenthesis |> regionEnd RegionType.Parenthesis |> closeBrace BraceType.Parenthesis;
        include expression;
    };

    automata texttemplateinnerexpression
    {
        '#>' return                               -> token TokenType.TextTemplateExpressionEnd;
        include expression;
    };

    automata texttemplate
    {
        '">' return                               -> token TokenType.TextTemplateEnd;
        '<#' goto texttemplateinnerexpression     -> token TokenType.TextTemplateExpressionStart;
        '.*'                                      -> value TokenType.TextTemplateText;
    };

    set document
    {
        // Keywords
        'string'                                -> keyword TokenType.TypeString;
        'char'                                  -> keyword TokenType.TypeChar;
        'int'                                   -> keyword TokenType.TypeInt;
        'type'                                  -> keyword TokenType.Type;
        'union'                                 -> keyword TokenType.Union;
        'let'                                   -> keyword TokenType.Let;

        // Punctuation
        '\<'                                    -> token TokenType.OpenTriangle |> regionStart RegionType.Triangle |> openBrace BraceType.Triangle;
        '\>'                                    -> token TokenType.CloseTriangle |> regionEnd RegionType.Triangle |> closeBrace BraceType.Triangle;

        include davecommon.document;
    };
};