
// This is a test

//import "dl.ds";

namespace davelexer
{
    enum TokenType
    {
        Import,
        Set,
        Start,
        Namespace,
        Enum,
        Pattern,
        Automata,
        Include,
        Goto,
        Return,
        Equals,
        String,
        Identifier,
        Number,
        Dot,
        Semicolon,
        Comma,
        Hat,
        Hyphen,
        OpenBrace,
        CloseBrace,
        OpenParenthesis,
        CloseParenthesis,
        OpenSquare,
        CloseSquare,
        ProducedBy,
        Comment,
        Whitespace,
        ReStart,
        ReEnd,
        Char,
        CharClass,
        Asterisk,
        Plus,
        Question,
        Pipe
    };

    pattern identifier  = '[a-zA-Z_][a-zA-Z_0-9]*';
    pattern string      = '"([^"]|(\\.))*"';
    pattern hex         = '[a-fA-F0-9]+';
    pattern int         = '0|([1-9][0-9]*)';

    automata comment
    {
        '\*/' return -> token TokenType.Comment;
        '.+'         -> token TokenType.Comment;
    };

    set rechar
    {
        '\\x{hex}{4}' -> value TokenType.Char;
        '\\s'         -> value TokenType.CharClass;
        '\\\.'        -> value TokenType.CharClass;
        '\\.'   -> value TokenType.Char;
        '.'     -> value TokenType.Char;
    };

    automata rebrace
    {
        '\}' return     -> token TokenType.CloseBrace;
        '{identifier}'  -> value TokenType.Identifier;
        '\.'            -> token TokenType.Dot;
        '{int}'         -> value TokenType.Number;
        ','             -> token TokenType.Comma;
    };

    automata resqr
    {
        ']' return      -> token TokenType.CloseSquare;
        '^'             -> token TokenType.Hat;
        '-'             -> token TokenType.Hyphen;

        include rechar;
    };

    automata re
    {
        '\'' return -> token TokenType.ReEnd;

        '\('         -> token TokenType.OpenParethesis;
        '\)'         -> token TokenType.CloseParenthesis;
        '\{' goto rebrace -> token TokenType.OpenBrace;
        '\[' goto resqr   -> token TokenType.OpenSquare;
        '\*'         -> token TokenType.Asterisk;
        '\?'         -> token TokenType.Question;
        '\+'         -> token TokenType.Plus;

        include rechar;
    };

    automata lexer
    {
        '\s+'       -> token TokenType.Whitespace;

        'import'    -> keyword TokenType.Import;
        'set'       -> keyword TokenType.Set;
        'start'     -> keyword TokenType.Start;
        'namespase' -> keyword TokenType.Namespace;
        'pattern'   -> keyword TokenType.Pattern;
        'automata'  -> keyword TokenType.Automata;
        'include'   -> keyword TokenType.Include;
        'goto'      -> keyword TokenType.Goto;
        'return'    -> keyword TokenType.Return;

        '='         -> token TokenType.Equals;
        '\.'        -> token TokenType.Dot;
        ';'         -> token TokenType.Semicolon;
        '\{'        -> token TokenType.OpenBrace;
        '\}'        -> token TokenType.CloseBrace;
        '->'        -> token TokenType.ProducedBy;

        '\'' goto re -> token TokenType.ReStart;
        '/\*' goto comment -> token TokenType.Comment;

        '//\n'      -> token TokenType.Comment;
        '//[^/].*\n' -> token TokenType.Comment;
        '////.*\n'  -> token TokenType.Comment;
        '///\n'     -> value TokenType.Documentation;
        '///[^/].*' -> value TokenType.Documentation;


        '{string}'  -> value TokenType.String;
        '{identifier}'  -> value TokenType.Identifier;
        '.'         -> token TokenType.Error;
        '\e'        -> token TokenType.EOD;
    };
};

set start = davelexer.lexer;