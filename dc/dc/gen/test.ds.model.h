// Generated by Dave Compiler

#pragma once

#include <iostream>
namespace davelexer {
enum class TokenType;
}
namespace System {

}
namespace davelexer {
    // The tokens of a ds file
    // Bla bla bla
    enum class TokenType {
        Import,
        Set,
        Start,
        Namespace,
        Enum,
        Pattern,
        Automata,
        Include,
        Goto,
        Return,
        Equals,
        String,
        Identifier,
        Number,
        Dot,
        Semicolon,
        Comma,
        Hat,
        Hyphen,
        OpenBrace,
        CloseBrace,
        OpenParenthesis,
        CloseParenthesis,
        OpenSquare,
        CloseSquare,
        ProducedBy,
        Comment,
        Whitespace,
        ReStart,
        ReEnd,
        Char,
        CharClass,
        Asterisk,
        Plus,
        Question,
        Pipe,
        Error,
        EOD,
        Documentation,
    };
    
    inline auto operator <<(std::wostream &os, const TokenType &v) -> std::wostream& {
        switch(v) {
        case TokenType::Import: return os << L"Import";
        case TokenType::Set: return os << L"Set";
        case TokenType::Start: return os << L"Start";
        case TokenType::Namespace: return os << L"Namespace";
        case TokenType::Enum: return os << L"Enum";
        case TokenType::Pattern: return os << L"Pattern";
        case TokenType::Automata: return os << L"Automata";
        case TokenType::Include: return os << L"Include";
        case TokenType::Goto: return os << L"Goto";
        case TokenType::Return: return os << L"Return";
        case TokenType::Equals: return os << L"Equals";
        case TokenType::String: return os << L"String";
        case TokenType::Identifier: return os << L"Identifier";
        case TokenType::Number: return os << L"Number";
        case TokenType::Dot: return os << L"Dot";
        case TokenType::Semicolon: return os << L"Semicolon";
        case TokenType::Comma: return os << L"Comma";
        case TokenType::Hat: return os << L"Hat";
        case TokenType::Hyphen: return os << L"Hyphen";
        case TokenType::OpenBrace: return os << L"OpenBrace";
        case TokenType::CloseBrace: return os << L"CloseBrace";
        case TokenType::OpenParenthesis: return os << L"OpenParenthesis";
        case TokenType::CloseParenthesis: return os << L"CloseParenthesis";
        case TokenType::OpenSquare: return os << L"OpenSquare";
        case TokenType::CloseSquare: return os << L"CloseSquare";
        case TokenType::ProducedBy: return os << L"ProducedBy";
        case TokenType::Comment: return os << L"Comment";
        case TokenType::Whitespace: return os << L"Whitespace";
        case TokenType::ReStart: return os << L"ReStart";
        case TokenType::ReEnd: return os << L"ReEnd";
        case TokenType::Char: return os << L"Char";
        case TokenType::CharClass: return os << L"CharClass";
        case TokenType::Asterisk: return os << L"Asterisk";
        case TokenType::Plus: return os << L"Plus";
        case TokenType::Question: return os << L"Question";
        case TokenType::Pipe: return os << L"Pipe";
        case TokenType::Error: return os << L"Error";
        case TokenType::EOD: return os << L"EOD";
        case TokenType::Documentation: return os << L"Documentation";
        default: return os << L"(Program Error)";
        }
    }
    
}
namespace System {
    
}
