// Generated by Dave Compiler

#include "lexer.ds.lexer.h"
#include <iostream>
#include <string>
#include <assert.h>

namespace davelexer {
    auto lexer::try_read_next_token(long &start_line, long &start_column, long &end_line, long &end_column, std::wstring &value, davelexer::TokenType &token) -> bool
    {
        start_line = _line;
        start_column = _column;
        size_t s = _states.back();
        value.clear();
        while(true) {
            if (_ch == std::char_traits<wchar_t>::eof()) {
                end_line = _line;
                end_column = _column;
                return false;
            }
            switch(s) {
            case 0:
                switch(_ch) {
                case 2147483647: // <eod>
                    token = davelexer::TokenType::EOD;
                    value += _ch;
                    _column++;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                case 124: // |
                    token = davelexer::TokenType::Error;
                    value += _ch;
                    _column++;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                case 96: // `
                    token = davelexer::TokenType::Error;
                    value += _ch;
                    _column++;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                case 94: // ^
                    token = davelexer::TokenType::Error;
                    value += _ch;
                    _column++;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                case 92: // {backslash}
                    token = davelexer::TokenType::Error;
                    value += _ch;
                    _column++;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                case 33: // !
                    token = davelexer::TokenType::Error;
                    value += _ch;
                    _column++;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                case 101: // e
                    s = 371;
                    _column++;
                    break;
                case 95: // _
                    s = 372;
                    _column++;
                    break;
                case 113: // q
                    s = 372;
                    _column++;
                    break;
                case 111: // o
                    s = 372;
                    _column++;
                    break;
                case 59: // ;
                    token = davelexer::TokenType::Semicolon;
                    value += _ch;
                    _column++;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                case 102: // f
                    s = 372;
                    _column++;
                    break;
                case 34: // "
                    s = 374;
                    _column++;
                    break;
                case 47: // /
                    s = 375;
                    _column++;
                    break;
                case 39: // '
                    token = davelexer::TokenType::ReStart;
                    _states.push_back(79);
                    value += _ch;
                    _column++;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                case 91: // [
                    token = davelexer::TokenType::OpenSquare;
                    value += _ch;
                    _column++;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                case 44: // ,
                    token = davelexer::TokenType::Comma;
                    value += _ch;
                    _column++;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                case 61: // =
                    token = davelexer::TokenType::Equals;
                    value += _ch;
                    _column++;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                case 123: // {
                    token = davelexer::TokenType::OpenBrace;
                    value += _ch;
                    _column++;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                case 100: // d
                    s = 381;
                    _column++;
                    break;
                case 119: // w
                    s = 382;
                    _column++;
                    break;
                case 116: // t
                    s = 383;
                    _column++;
                    break;
                case 45: // -
                    s = 384;
                    _column++;
                    break;
                case 114: // r
                    s = 385;
                    _column++;
                    break;
                case 93: // ]
                    token = davelexer::TokenType::CloseSquare;
                    value += _ch;
                    _column++;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                case 46: // .
                    token = davelexer::TokenType::Dot;
                    value += _ch;
                    _column++;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                case 115: // s
                    s = 388;
                    _column++;
                    break;
                case 12: // {backslash}f
                    s = 389;
                    _column++;
                    break;
                case 60: // <
                    token = davelexer::TokenType::Error;
                    value += _ch;
                    _column++;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                case 110: // n
                    s = 390;
                    _column++;
                    break;
                case 13: // {backslash}r
                    s = 389;
                    _column = 1;
                    break;
                case 58: // :
                    token = davelexer::TokenType::Colon;
                    value += _ch;
                    _column++;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                case 11: // {backslash}v
                    s = 389;
                    _column++;
                    break;
                case 105: // i
                    s = 392;
                    _column++;
                    break;
                case 9: // {backslash}t
                    s = 389;
                    _column++;
                    break;
                case 103: // g
                    s = 393;
                    _column++;
                    break;
                case 112: // p
                    s = 394;
                    _column++;
                    break;
                case 32: //  
                    s = 389;
                    _column++;
                    break;
                case 125: // }
                    token = davelexer::TokenType::CloseBrace;
                    value += _ch;
                    _column++;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                case 104: // h
                    s = 372;
                    _column++;
                    break;
                case 10: // {backslash}n
                    s = 389;
                    _line++;
                    _column = 1;
                    break;
                case 97: // a
                    s = 396;
                    _column++;
                    break;
                default:
                    if (_ch >= 62 && _ch <= 64) { // > - @
                        token = davelexer::TokenType::Error;
                        value += _ch;
                        _column++;
                        end_line = _line;
                        end_column = _column;
                        _ch = _stm.get();
                        return true;
                    } else if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        token = davelexer::TokenType::Error;
                        value += _ch;
                        _column++;
                        end_line = _line;
                        end_column = _column;
                        _ch = _stm.get();
                        return true;
                    } else if (_ch >= 0 && _ch <= 8) { // <start> - {backslash}b
                        token = davelexer::TokenType::Error;
                        value += _ch;
                        _column++;
                        end_line = _line;
                        end_column = _column;
                        _ch = _stm.get();
                        return true;
                    } else if (_ch >= 126 && _ch <= 2147483646) { // ~ - <end>
                        token = davelexer::TokenType::Error;
                        value += _ch;
                        _column++;
                        end_line = _line;
                        end_column = _column;
                        _ch = _stm.get();
                        return true;
                    } else if (_ch >= 120 && _ch <= 122) { // x - z
                        s = 372;
                        _column++;
                    } else if (_ch >= 106 && _ch <= 109) { // j - m
                        s = 372;
                        _column++;
                    } else if (_ch >= 98 && _ch <= 99) { // b - c
                        s = 372;
                        _column++;
                    } else if (_ch >= 117 && _ch <= 118) { // u - v
                        s = 372;
                        _column++;
                    } else if (_ch >= 14 && _ch <= 31) { // {backslash}x14 - {backslash}x31
                        token = davelexer::TokenType::Error;
                        value += _ch;
                        _column++;
                        end_line = _line;
                        end_column = _column;
                        _ch = _stm.get();
                        return true;
                    } else if (_ch >= 35 && _ch <= 38) { // # - &
                        token = davelexer::TokenType::Error;
                        value += _ch;
                        _column++;
                        end_line = _line;
                        end_column = _column;
                        _ch = _stm.get();
                        return true;
                    } else if (_ch >= 40 && _ch <= 43) { // ( - +
                        token = davelexer::TokenType::Error;
                        value += _ch;
                        _column++;
                        end_line = _line;
                        end_column = _column;
                        _ch = _stm.get();
                        return true;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 372;
                        _column++;
                    }
                }
                break;
            case 1:
                switch(_ch) {
                case 10: // {backslash}n
                    s = 15;
                    _line++;
                    _column = 1;
                    break;
                case 2147483647: // <eod>
                    token = davelexer::TokenType::Error;
                    value += _ch;
                    _column++;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                case 42: // *
                    s = 517;
                    _column++;
                    break;
                case 13: // {backslash}r
                    s = 15;
                    _column = 1;
                    break;
                default:
                    if (_ch >= 43 && _ch <= 2147483646) { // + - <end>
                        s = 15;
                        _column++;
                    } else if (_ch >= 0 && _ch <= 9) { // <start> - {backslash}t
                        s = 15;
                        _column++;
                    } else if (_ch >= 11 && _ch <= 12) { // {backslash}v - {backslash}f
                        s = 15;
                        _column++;
                    } else if (_ch >= 14 && _ch <= 41) { // {backslash}x14 - )
                        s = 15;
                        _column++;
                    }
                }
                break;
            case 15:
                switch(_ch) {
                case 10: // {backslash}n
                    s = 15;
                    _line++;
                    _column = 1;
                    break;
                case 13: // {backslash}r
                    s = 15;
                    _column = 1;
                    break;
                default:
                    if (_ch >= 43 && _ch <= 2147483646) { // + - <end>
                        s = 15;
                        _column++;
                    } else if (_ch >= 0 && _ch <= 9) { // <start> - {backslash}t
                        s = 15;
                        _column++;
                    } else if (_ch >= 11 && _ch <= 12) { // {backslash}v - {backslash}f
                        s = 15;
                        _column++;
                    } else if (_ch >= 14 && _ch <= 41) { // {backslash}x14 - )
                        s = 15;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Comment;
                        return true;
                    }
                }
                break;
            case 19:
                switch(_ch) {
                case 96: // `
                    token = davelexer::TokenType::Error;
                    value += _ch;
                    _column++;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                case 47: // /
                    token = davelexer::TokenType::Error;
                    value += _ch;
                    _column++;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                case 45: // -
                    token = davelexer::TokenType::Error;
                    value += _ch;
                    _column++;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                case 2147483647: // <eod>
                    token = davelexer::TokenType::Error;
                    value += _ch;
                    _column++;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                case 44: // ,
                    token = davelexer::TokenType::Comma;
                    value += _ch;
                    _column++;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                case 46: // .
                    token = davelexer::TokenType::Dot;
                    value += _ch;
                    _column++;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                case 125: // }
                    token = davelexer::TokenType::CloseBrace;
                    _states.pop_back();
                    value += _ch;
                    _column++;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                case 10: // {backslash}n
                    token = davelexer::TokenType::Error;
                    value += _ch;
                    _line++;
                    _column = 1;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                case 95: // _
                    s = 508;
                    _column++;
                    break;
                case 48: // 0
                    token = davelexer::TokenType::Number;
                    value += _ch;
                    _column++;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                case 13: // {backslash}r
                    token = davelexer::TokenType::Error;
                    value += _ch;
                    _column = 1;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                default:
                    if (_ch >= 126 && _ch <= 2147483646) { // ~ - <end>
                        token = davelexer::TokenType::Error;
                        value += _ch;
                        _column++;
                        end_line = _line;
                        end_column = _column;
                        _ch = _stm.get();
                        return true;
                    } else if (_ch >= 91 && _ch <= 94) { // [ - ^
                        token = davelexer::TokenType::Error;
                        value += _ch;
                        _column++;
                        end_line = _line;
                        end_column = _column;
                        _ch = _stm.get();
                        return true;
                    } else if (_ch >= 58 && _ch <= 64) { // : - @
                        token = davelexer::TokenType::Error;
                        value += _ch;
                        _column++;
                        end_line = _line;
                        end_column = _column;
                        _ch = _stm.get();
                        return true;
                    } else if (_ch >= 49 && _ch <= 57) { // 1 - 9
                        s = 504;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 122) { // a - z
                        s = 508;
                        _column++;
                    } else if (_ch >= 123 && _ch <= 124) { // { - |
                        token = davelexer::TokenType::Error;
                        value += _ch;
                        _column++;
                        end_line = _line;
                        end_column = _column;
                        _ch = _stm.get();
                        return true;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 508;
                        _column++;
                    } else if (_ch >= 0 && _ch <= 9) { // <start> - {backslash}t
                        token = davelexer::TokenType::Error;
                        value += _ch;
                        _column++;
                        end_line = _line;
                        end_column = _column;
                        _ch = _stm.get();
                        return true;
                    } else if (_ch >= 11 && _ch <= 12) { // {backslash}v - {backslash}f
                        token = davelexer::TokenType::Error;
                        value += _ch;
                        _column++;
                        end_line = _line;
                        end_column = _column;
                        _ch = _stm.get();
                        return true;
                    } else if (_ch >= 14 && _ch <= 43) { // {backslash}x14 - +
                        token = davelexer::TokenType::Error;
                        value += _ch;
                        _column++;
                        end_line = _line;
                        end_column = _column;
                        _ch = _stm.get();
                        return true;
                    }
                }
                break;
            case 24:
                switch(_ch) {
                case 95: // _
                    s = 24;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 24;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 24;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 122) { // a - z
                        s = 24;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Identifier;
                        return true;
                    }
                }
                break;
            case 34:
                switch(_ch) {
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 34;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Number;
                        return true;
                    }
                }
                break;
            case 42:
                switch(_ch) {
                case 10: // {backslash}n
                    token = davelexer::TokenType::Char;
                    value += _ch;
                    _line++;
                    _column = 1;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                case 46: // .
                    token = davelexer::TokenType::CharClass;
                    value += _ch;
                    _column++;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                case 92: // {backslash}
                    s = 495;
                    _column++;
                    break;
                case 2147483647: // <eod>
                    token = davelexer::TokenType::Error;
                    value += _ch;
                    _column++;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                case 45: // -
                    token = davelexer::TokenType::Hyphen;
                    value += _ch;
                    _column++;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                case 94: // ^
                    token = davelexer::TokenType::Hat;
                    value += _ch;
                    _column++;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                case 93: // ]
                    token = davelexer::TokenType::CloseSquare;
                    _states.pop_back();
                    value += _ch;
                    _column++;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                case 13: // {backslash}r
                    token = davelexer::TokenType::Char;
                    value += _ch;
                    _column = 1;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                default:
                    if (_ch >= 95 && _ch <= 2147483646) { // _ - <end>
                        token = davelexer::TokenType::Char;
                        value += _ch;
                        _column++;
                        end_line = _line;
                        end_column = _column;
                        _ch = _stm.get();
                        return true;
                    } else if (_ch >= 47 && _ch <= 91) { // / - [
                        token = davelexer::TokenType::Char;
                        value += _ch;
                        _column++;
                        end_line = _line;
                        end_column = _column;
                        _ch = _stm.get();
                        return true;
                    } else if (_ch >= 0 && _ch <= 9) { // <start> - {backslash}t
                        token = davelexer::TokenType::Char;
                        value += _ch;
                        _column++;
                        end_line = _line;
                        end_column = _column;
                        _ch = _stm.get();
                        return true;
                    } else if (_ch >= 11 && _ch <= 12) { // {backslash}v - {backslash}f
                        token = davelexer::TokenType::Char;
                        value += _ch;
                        _column++;
                        end_line = _line;
                        end_column = _column;
                        _ch = _stm.get();
                        return true;
                    } else if (_ch >= 14 && _ch <= 44) { // {backslash}x14 - ,
                        token = davelexer::TokenType::Char;
                        value += _ch;
                        _column++;
                        end_line = _line;
                        end_column = _column;
                        _ch = _stm.get();
                        return true;
                    }
                }
                break;
            case 79:
                switch(_ch) {
                case 2147483647: // <eod>
                    token = davelexer::TokenType::Error;
                    value += _ch;
                    _column++;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                case 46: // .
                    token = davelexer::TokenType::CharClass;
                    value += _ch;
                    _column++;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                case 92: // {backslash}
                    s = 483;
                    _column++;
                    break;
                case 43: // +
                    token = davelexer::TokenType::Plus;
                    value += _ch;
                    _column++;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                case 10: // {backslash}n
                    token = davelexer::TokenType::Char;
                    value += _ch;
                    _line++;
                    _column = 1;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                case 42: // *
                    token = davelexer::TokenType::Asterisk;
                    value += _ch;
                    _column++;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                case 123: // {
                    token = davelexer::TokenType::OpenBrace;
                    _states.push_back(19);
                    value += _ch;
                    _column++;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                case 124: // |
                    token = davelexer::TokenType::Pipe;
                    value += _ch;
                    _column++;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                case 91: // [
                    token = davelexer::TokenType::OpenSquare;
                    _states.push_back(42);
                    value += _ch;
                    _column++;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                case 40: // (
                    token = davelexer::TokenType::OpenParenthesis;
                    value += _ch;
                    _column++;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                case 63: // ?
                    token = davelexer::TokenType::Question;
                    value += _ch;
                    _column++;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                case 41: // )
                    token = davelexer::TokenType::CloseParenthesis;
                    value += _ch;
                    _column++;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                case 39: // '
                    token = davelexer::TokenType::ReEnd;
                    _states.pop_back();
                    value += _ch;
                    _column++;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                case 13: // {backslash}r
                    token = davelexer::TokenType::Char;
                    value += _ch;
                    _column = 1;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                default:
                    if (_ch >= 125 && _ch <= 2147483646) { // } - <end>
                        token = davelexer::TokenType::Char;
                        value += _ch;
                        _column++;
                        end_line = _line;
                        end_column = _column;
                        _ch = _stm.get();
                        return true;
                    } else if (_ch >= 93 && _ch <= 122) { // ] - z
                        token = davelexer::TokenType::Char;
                        value += _ch;
                        _column++;
                        end_line = _line;
                        end_column = _column;
                        _ch = _stm.get();
                        return true;
                    } else if (_ch >= 44 && _ch <= 45) { // , - -
                        token = davelexer::TokenType::Char;
                        value += _ch;
                        _column++;
                        end_line = _line;
                        end_column = _column;
                        _ch = _stm.get();
                        return true;
                    } else if (_ch >= 47 && _ch <= 62) { // / - >
                        token = davelexer::TokenType::Char;
                        value += _ch;
                        _column++;
                        end_line = _line;
                        end_column = _column;
                        _ch = _stm.get();
                        return true;
                    } else if (_ch >= 64 && _ch <= 90) { // @ - Z
                        token = davelexer::TokenType::Char;
                        value += _ch;
                        _column++;
                        end_line = _line;
                        end_column = _column;
                        _ch = _stm.get();
                        return true;
                    } else if (_ch >= 0 && _ch <= 9) { // <start> - {backslash}t
                        token = davelexer::TokenType::Char;
                        value += _ch;
                        _column++;
                        end_line = _line;
                        end_column = _column;
                        _ch = _stm.get();
                        return true;
                    } else if (_ch >= 11 && _ch <= 12) { // {backslash}v - {backslash}f
                        token = davelexer::TokenType::Char;
                        value += _ch;
                        _column++;
                        end_line = _line;
                        end_column = _column;
                        _ch = _stm.get();
                        return true;
                    } else if (_ch >= 14 && _ch <= 38) { // {backslash}x14 - &
                        token = davelexer::TokenType::Char;
                        value += _ch;
                        _column++;
                        end_line = _line;
                        end_column = _column;
                        _ch = _stm.get();
                        return true;
                    }
                }
                break;
            case 130:
                switch(_ch) {
                case 12: // {backslash}f
                    s = 130;
                    _column++;
                    break;
                case 11: // {backslash}v
                    s = 130;
                    _column++;
                    break;
                case 13: // {backslash}r
                    s = 130;
                    _column = 1;
                    break;
                case 32: //  
                    s = 130;
                    _column++;
                    break;
                case 10: // {backslash}n
                    s = 130;
                    _line++;
                    _column = 1;
                    break;
                case 9: // {backslash}t
                    s = 130;
                    _column++;
                    break;
                default:
                    // Yield
                    end_line = _line;
                    end_column = _column;
                    token = davelexer::TokenType::Whitespace;
                    return true;
                }
                break;
            case 303:
                switch(_ch) {
                case 10: // {backslash}n
                    token = davelexer::TokenType::Comment;
                    value += _ch;
                    _line++;
                    _column = 1;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                case 13: // {backslash}r
                    s = 306;
                    _column = 1;
                    break;
                case 2147483647: // <eod>
                    token = davelexer::TokenType::Comment;
                    value += _ch;
                    _column++;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                default:
                    if (_ch >= 0 && _ch <= 9) { // <start> - {backslash}t
                        s = 306;
                        _column++;
                    } else if (_ch >= 11 && _ch <= 12) { // {backslash}v - {backslash}f
                        s = 306;
                        _column++;
                    } else if (_ch >= 14 && _ch <= 2147483646) { // {backslash}x14 - <end>
                        s = 306;
                        _column++;
                    }
                }
                break;
            case 306:
                switch(_ch) {
                case 10: // {backslash}n
                    token = davelexer::TokenType::Comment;
                    value += _ch;
                    _line++;
                    _column = 1;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                case 13: // {backslash}r
                    s = 306;
                    _column = 1;
                    break;
                case 2147483647: // <eod>
                    token = davelexer::TokenType::Comment;
                    value += _ch;
                    _column++;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                default:
                    if (_ch >= 0 && _ch <= 9) { // <start> - {backslash}t
                        s = 306;
                        _column++;
                    } else if (_ch >= 11 && _ch <= 12) { // {backslash}v - {backslash}f
                        s = 306;
                        _column++;
                    } else if (_ch >= 14 && _ch <= 2147483646) { // {backslash}x14 - <end>
                        s = 306;
                        _column++;
                    }
                }
                break;
            case 314:
                switch(_ch) {
                case 10: // {backslash}n
                    token = davelexer::TokenType::Comment;
                    value += _ch;
                    _line++;
                    _column = 1;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                case 13: // {backslash}r
                    s = 318;
                    _column = 1;
                    break;
                case 2147483647: // <eod>
                    token = davelexer::TokenType::Comment;
                    value += _ch;
                    _column++;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                default:
                    if (_ch >= 0 && _ch <= 9) { // <start> - {backslash}t
                        s = 318;
                        _column++;
                    } else if (_ch >= 11 && _ch <= 12) { // {backslash}v - {backslash}f
                        s = 318;
                        _column++;
                    } else if (_ch >= 14 && _ch <= 2147483646) { // {backslash}x14 - <end>
                        s = 318;
                        _column++;
                    }
                }
                break;
            case 318:
                switch(_ch) {
                case 10: // {backslash}n
                    token = davelexer::TokenType::Comment;
                    value += _ch;
                    _line++;
                    _column = 1;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                case 13: // {backslash}r
                    s = 318;
                    _column = 1;
                    break;
                case 2147483647: // <eod>
                    token = davelexer::TokenType::Comment;
                    value += _ch;
                    _column++;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                default:
                    if (_ch >= 0 && _ch <= 9) { // <start> - {backslash}t
                        s = 318;
                        _column++;
                    } else if (_ch >= 11 && _ch <= 12) { // {backslash}v - {backslash}f
                        s = 318;
                        _column++;
                    } else if (_ch >= 14 && _ch <= 2147483646) { // {backslash}x14 - <end>
                        s = 318;
                        _column++;
                    }
                }
                break;
            case 335:
                switch(_ch) {
                case 10: // {backslash}n
                    token = davelexer::TokenType::Documentation;
                    value += _ch;
                    _line++;
                    _column = 1;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                case 13: // {backslash}r
                    s = 339;
                    _column = 1;
                    break;
                case 2147483647: // <eod>
                    token = davelexer::TokenType::Documentation;
                    value += _ch;
                    _column++;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                default:
                    if (_ch >= 0 && _ch <= 9) { // <start> - {backslash}t
                        s = 339;
                        _column++;
                    } else if (_ch >= 11 && _ch <= 12) { // {backslash}v - {backslash}f
                        s = 339;
                        _column++;
                    } else if (_ch >= 14 && _ch <= 2147483646) { // {backslash}x14 - <end>
                        s = 339;
                        _column++;
                    }
                }
                break;
            case 339:
                switch(_ch) {
                case 10: // {backslash}n
                    token = davelexer::TokenType::Documentation;
                    value += _ch;
                    _line++;
                    _column = 1;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                case 13: // {backslash}r
                    s = 339;
                    _column = 1;
                    break;
                case 2147483647: // <eod>
                    token = davelexer::TokenType::Documentation;
                    value += _ch;
                    _column++;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                default:
                    if (_ch >= 0 && _ch <= 9) { // <start> - {backslash}t
                        s = 339;
                        _column++;
                    } else if (_ch >= 11 && _ch <= 12) { // {backslash}v - {backslash}f
                        s = 339;
                        _column++;
                    } else if (_ch >= 14 && _ch <= 2147483646) { // {backslash}x14 - <end>
                        s = 339;
                        _column++;
                    }
                }
                break;
            case 354:
                switch(_ch) {
                case 34: // "
                    token = davelexer::TokenType::String;
                    value += _ch;
                    _column++;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                case 2147483647: // <eod>
                    s = 356;
                    _column++;
                    break;
                case 92: // {backslash}
                    s = 357;
                    _column++;
                    break;
                case 10: // {backslash}n
                    s = 354;
                    _line++;
                    _column = 1;
                    break;
                case 13: // {backslash}r
                    s = 354;
                    _column = 1;
                    break;
                default:
                    if (_ch >= 93 && _ch <= 2147483646) { // ] - <end>
                        s = 354;
                        _column++;
                    } else if (_ch >= 35 && _ch <= 91) { // # - [
                        s = 354;
                        _column++;
                    } else if (_ch >= 0 && _ch <= 9) { // <start> - {backslash}t
                        s = 354;
                        _column++;
                    } else if (_ch >= 11 && _ch <= 12) { // {backslash}v - {backslash}f
                        s = 354;
                        _column++;
                    } else if (_ch >= 14 && _ch <= 33) { // {backslash}x14 - !
                        s = 354;
                        _column++;
                    }
                }
                break;
            case 356:
                switch(_ch) {
                case 34: // "
                    token = davelexer::TokenType::String;
                    value += _ch;
                    _column++;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                case 2147483647: // <eod>
                    s = 356;
                    _column++;
                    break;
                case 92: // {backslash}
                    s = 357;
                    _column++;
                    break;
                case 10: // {backslash}n
                    s = 354;
                    _line++;
                    _column = 1;
                    break;
                case 13: // {backslash}r
                    s = 354;
                    _column = 1;
                    break;
                default:
                    if (_ch >= 93 && _ch <= 2147483646) { // ] - <end>
                        s = 354;
                        _column++;
                    } else if (_ch >= 35 && _ch <= 91) { // # - [
                        s = 354;
                        _column++;
                    } else if (_ch >= 0 && _ch <= 9) { // <start> - {backslash}t
                        s = 354;
                        _column++;
                    } else if (_ch >= 11 && _ch <= 12) { // {backslash}v - {backslash}f
                        s = 354;
                        _column++;
                    } else if (_ch >= 14 && _ch <= 33) { // {backslash}x14 - !
                        s = 354;
                        _column++;
                    }
                }
                break;
            case 357:
                switch(_ch) {
                case 10: // {backslash}n
                    s = 359;
                    _line++;
                    _column = 1;
                    break;
                case 2147483647: // <eod>
                    s = 361;
                    _column++;
                    break;
                case 13: // {backslash}r
                    s = 359;
                    _column = 1;
                    break;
                default:
                    if (_ch >= 0 && _ch <= 9) { // <start> - {backslash}t
                        s = 359;
                        _column++;
                    } else if (_ch >= 11 && _ch <= 12) { // {backslash}v - {backslash}f
                        s = 359;
                        _column++;
                    } else if (_ch >= 14 && _ch <= 2147483646) { // {backslash}x14 - <end>
                        s = 359;
                        _column++;
                    }
                }
                break;
            case 359:
                switch(_ch) {
                case 34: // "
                    token = davelexer::TokenType::String;
                    value += _ch;
                    _column++;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                case 2147483647: // <eod>
                    s = 356;
                    _column++;
                    break;
                case 92: // {backslash}
                    s = 357;
                    _column++;
                    break;
                case 10: // {backslash}n
                    s = 354;
                    _line++;
                    _column = 1;
                    break;
                case 13: // {backslash}r
                    s = 354;
                    _column = 1;
                    break;
                default:
                    if (_ch >= 93 && _ch <= 2147483646) { // ] - <end>
                        s = 354;
                        _column++;
                    } else if (_ch >= 35 && _ch <= 91) { // # - [
                        s = 354;
                        _column++;
                    } else if (_ch >= 0 && _ch <= 9) { // <start> - {backslash}t
                        s = 354;
                        _column++;
                    } else if (_ch >= 11 && _ch <= 12) { // {backslash}v - {backslash}f
                        s = 354;
                        _column++;
                    } else if (_ch >= 14 && _ch <= 33) { // {backslash}x14 - !
                        s = 354;
                        _column++;
                    }
                }
                break;
            case 361:
                switch(_ch) {
                case 34: // "
                    token = davelexer::TokenType::String;
                    value += _ch;
                    _column++;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                case 2147483647: // <eod>
                    s = 356;
                    _column++;
                    break;
                case 92: // {backslash}
                    s = 357;
                    _column++;
                    break;
                case 10: // {backslash}n
                    s = 354;
                    _line++;
                    _column = 1;
                    break;
                case 13: // {backslash}r
                    s = 354;
                    _column = 1;
                    break;
                default:
                    if (_ch >= 93 && _ch <= 2147483646) { // ] - <end>
                        s = 354;
                        _column++;
                    } else if (_ch >= 35 && _ch <= 91) { // # - [
                        s = 354;
                        _column++;
                    } else if (_ch >= 0 && _ch <= 9) { // <start> - {backslash}t
                        s = 354;
                        _column++;
                    } else if (_ch >= 11 && _ch <= 12) { // {backslash}v - {backslash}f
                        s = 354;
                        _column++;
                    } else if (_ch >= 14 && _ch <= 33) { // {backslash}x14 - !
                        s = 354;
                        _column++;
                    }
                }
                break;
            case 365:
                switch(_ch) {
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 122) { // a - z
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Identifier;
                        return true;
                    }
                }
                break;
            case 371:
                switch(_ch) {
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                case 110: // n
                    s = 519;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 111 && _ch <= 122) { // o - z
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 109) { // a - m
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Identifier;
                        return true;
                    }
                }
                break;
            case 372:
                switch(_ch) {
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 122) { // a - z
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Identifier;
                        return true;
                    }
                }
                break;
            case 374:
                switch(_ch) {
                case 34: // "
                    token = davelexer::TokenType::String;
                    value += _ch;
                    _column++;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                case 2147483647: // <eod>
                    s = 356;
                    _column++;
                    break;
                case 92: // {backslash}
                    s = 357;
                    _column++;
                    break;
                case 10: // {backslash}n
                    s = 354;
                    _line++;
                    _column = 1;
                    break;
                case 13: // {backslash}r
                    s = 354;
                    _column = 1;
                    break;
                default:
                    if (_ch >= 93 && _ch <= 2147483646) { // ] - <end>
                        s = 354;
                        _column++;
                    } else if (_ch >= 35 && _ch <= 91) { // # - [
                        s = 354;
                        _column++;
                    } else if (_ch >= 0 && _ch <= 9) { // <start> - {backslash}t
                        s = 354;
                        _column++;
                    } else if (_ch >= 11 && _ch <= 12) { // {backslash}v - {backslash}f
                        s = 354;
                        _column++;
                    } else if (_ch >= 14 && _ch <= 33) { // {backslash}x14 - !
                        s = 354;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Error;
                        return true;
                    }
                }
                break;
            case 375:
                switch(_ch) {
                case 42: // *
                    token = davelexer::TokenType::Comment;
                    _states.push_back(1);
                    value += _ch;
                    _column++;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                case 47: // /
                    s = 515;
                    _column++;
                    break;
                default:
                    // Yield
                    end_line = _line;
                    end_column = _column;
                    token = davelexer::TokenType::Error;
                    return true;
                }
                break;
            case 381:
                switch(_ch) {
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                case 119: // w
                    s = 477;
                    _column++;
                    break;
                default:
                    if (_ch >= 120 && _ch <= 122) { // x - z
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 118) { // a - v
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Identifier;
                        return true;
                    }
                }
                break;
            case 382:
                switch(_ch) {
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                case 111: // o
                    s = 474;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 112 && _ch <= 122) { // p - z
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 110) { // a - n
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Identifier;
                        return true;
                    }
                }
                break;
            case 383:
                switch(_ch) {
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                case 122: // z
                    s = 365;
                    _column++;
                    break;
                case 121: // y
                    s = 471;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 120) { // a - x
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Identifier;
                        return true;
                    }
                }
                break;
            case 384:
                switch(_ch) {
                case 62: // >
                    token = davelexer::TokenType::ProducedBy;
                    value += _ch;
                    _column++;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                default:
                    // Yield
                    end_line = _line;
                    end_column = _column;
                    token = davelexer::TokenType::Error;
                    return true;
                }
                break;
            case 385:
                switch(_ch) {
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                case 101: // e
                    s = 466;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 102 && _ch <= 122) { // f - z
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 100) { // a - d
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Identifier;
                        return true;
                    }
                }
                break;
            case 388:
                switch(_ch) {
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                case 101: // e
                    s = 456;
                    _column++;
                    break;
                case 116: // t
                    s = 457;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 117 && _ch <= 122) { // u - z
                        s = 365;
                        _column++;
                    } else if (_ch >= 102 && _ch <= 115) { // f - s
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 100) { // a - d
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Identifier;
                        return true;
                    }
                }
                break;
            case 389:
                switch(_ch) {
                case 12: // {backslash}f
                    s = 130;
                    _column++;
                    break;
                case 11: // {backslash}v
                    s = 130;
                    _column++;
                    break;
                case 13: // {backslash}r
                    s = 130;
                    _column = 1;
                    break;
                case 32: //  
                    s = 130;
                    _column++;
                    break;
                case 10: // {backslash}n
                    s = 130;
                    _line++;
                    _column = 1;
                    break;
                case 9: // {backslash}t
                    s = 130;
                    _column++;
                    break;
                default:
                    // Yield
                    end_line = _line;
                    end_column = _column;
                    token = davelexer::TokenType::Whitespace;
                    return true;
                }
                break;
            case 390:
                switch(_ch) {
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                case 97: // a
                    s = 448;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 98 && _ch <= 122) { // b - z
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Identifier;
                        return true;
                    }
                }
                break;
            case 392:
                switch(_ch) {
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                case 109: // m
                    s = 429;
                    _column++;
                    break;
                case 110: // n
                    s = 430;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 111 && _ch <= 122) { // o - z
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 108) { // a - l
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Identifier;
                        return true;
                    }
                }
                break;
            case 393:
                switch(_ch) {
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                case 111: // o
                    s = 426;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 112 && _ch <= 122) { // p - z
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 110) { // a - n
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Identifier;
                        return true;
                    }
                }
                break;
            case 394:
                switch(_ch) {
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                case 97: // a
                    s = 411;
                    _column++;
                    break;
                case 114: // r
                    s = 412;
                    _column++;
                    break;
                default:
                    if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 115 && _ch <= 122) { // s - z
                        s = 365;
                        _column++;
                    } else if (_ch >= 98 && _ch <= 113) { // b - q
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Identifier;
                        return true;
                    }
                }
                break;
            case 396:
                switch(_ch) {
                case 98: // b
                    s = 397;
                    _column++;
                    break;
                case 97: // a
                    s = 365;
                    _column++;
                    break;
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                case 117: // u
                    s = 398;
                    _column++;
                    break;
                default:
                    if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 118 && _ch <= 122) { // v - z
                        s = 365;
                        _column++;
                    } else if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 99 && _ch <= 116) { // c - t
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Identifier;
                        return true;
                    }
                }
                break;
            case 397:
                switch(_ch) {
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                case 115: // s
                    s = 405;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 116 && _ch <= 122) { // t - z
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 114) { // a - r
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Identifier;
                        return true;
                    }
                }
                break;
            case 398:
                switch(_ch) {
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                case 116: // t
                    s = 399;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 115) { // a - s
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 117 && _ch <= 122) { // u - z
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Identifier;
                        return true;
                    }
                }
                break;
            case 399:
                switch(_ch) {
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                case 111: // o
                    s = 400;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 112 && _ch <= 122) { // p - z
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 110) { // a - n
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Identifier;
                        return true;
                    }
                }
                break;
            case 400:
                switch(_ch) {
                case 109: // m
                    s = 401;
                    _column++;
                    break;
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 110 && _ch <= 122) { // n - z
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 108) { // a - l
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Identifier;
                        return true;
                    }
                }
                break;
            case 401:
                switch(_ch) {
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                case 97: // a
                    s = 402;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 98 && _ch <= 122) { // b - z
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Identifier;
                        return true;
                    }
                }
                break;
            case 402:
                switch(_ch) {
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                case 116: // t
                    s = 403;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 115) { // a - s
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 117 && _ch <= 122) { // u - z
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Identifier;
                        return true;
                    }
                }
                break;
            case 403:
                switch(_ch) {
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                case 97: // a
                    s = 404;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 98 && _ch <= 122) { // b - z
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Identifier;
                        return true;
                    }
                }
                break;
            case 404:
                switch(_ch) {
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 122) { // a - z
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Automata;
                        return true;
                    }
                }
                break;
            case 405:
                switch(_ch) {
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                case 116: // t
                    s = 406;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 115) { // a - s
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 117 && _ch <= 122) { // u - z
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Identifier;
                        return true;
                    }
                }
                break;
            case 406:
                switch(_ch) {
                case 114: // r
                    s = 407;
                    _column++;
                    break;
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 115 && _ch <= 122) { // s - z
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 113) { // a - q
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Identifier;
                        return true;
                    }
                }
                break;
            case 407:
                switch(_ch) {
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                case 97: // a
                    s = 408;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 98 && _ch <= 122) { // b - z
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Identifier;
                        return true;
                    }
                }
                break;
            case 408:
                switch(_ch) {
                case 99: // c
                    s = 409;
                    _column++;
                    break;
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 100 && _ch <= 122) { // d - z
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 98) { // a - b
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Identifier;
                        return true;
                    }
                }
                break;
            case 409:
                switch(_ch) {
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                case 116: // t
                    s = 410;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 115) { // a - s
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 117 && _ch <= 122) { // u - z
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Identifier;
                        return true;
                    }
                }
                break;
            case 410:
                switch(_ch) {
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 122) { // a - z
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Abstract;
                        return true;
                    }
                }
                break;
            case 411:
                switch(_ch) {
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                case 116: // t
                    s = 421;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 115) { // a - s
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 117 && _ch <= 122) { // u - z
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Identifier;
                        return true;
                    }
                }
                break;
            case 412:
                switch(_ch) {
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                case 111: // o
                    s = 413;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 112 && _ch <= 122) { // p - z
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 110) { // a - n
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Identifier;
                        return true;
                    }
                }
                break;
            case 413:
                switch(_ch) {
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                case 100: // d
                    s = 414;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 101 && _ch <= 122) { // e - z
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 99) { // a - c
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Identifier;
                        return true;
                    }
                }
                break;
            case 414:
                switch(_ch) {
                case 117: // u
                    s = 415;
                    _column++;
                    break;
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 118 && _ch <= 122) { // v - z
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 116) { // a - t
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Identifier;
                        return true;
                    }
                }
                break;
            case 415:
                switch(_ch) {
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                case 99: // c
                    s = 416;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 100 && _ch <= 122) { // d - z
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 98) { // a - b
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Identifier;
                        return true;
                    }
                }
                break;
            case 416:
                switch(_ch) {
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                case 116: // t
                    s = 417;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 115) { // a - s
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 117 && _ch <= 122) { // u - z
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Identifier;
                        return true;
                    }
                }
                break;
            case 417:
                switch(_ch) {
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                case 105: // i
                    s = 418;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 106 && _ch <= 122) { // j - z
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 104) { // a - h
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Identifier;
                        return true;
                    }
                }
                break;
            case 418:
                switch(_ch) {
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                case 111: // o
                    s = 419;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 112 && _ch <= 122) { // p - z
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 110) { // a - n
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Identifier;
                        return true;
                    }
                }
                break;
            case 419:
                switch(_ch) {
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                case 110: // n
                    s = 420;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 111 && _ch <= 122) { // o - z
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 109) { // a - m
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Identifier;
                        return true;
                    }
                }
                break;
            case 420:
                switch(_ch) {
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 122) { // a - z
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Production;
                        return true;
                    }
                }
                break;
            case 421:
                switch(_ch) {
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                case 116: // t
                    s = 422;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 115) { // a - s
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 117 && _ch <= 122) { // u - z
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Identifier;
                        return true;
                    }
                }
                break;
            case 422:
                switch(_ch) {
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                case 101: // e
                    s = 423;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 102 && _ch <= 122) { // f - z
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 100) { // a - d
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Identifier;
                        return true;
                    }
                }
                break;
            case 423:
                switch(_ch) {
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                case 114: // r
                    s = 424;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 115 && _ch <= 122) { // s - z
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 113) { // a - q
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Identifier;
                        return true;
                    }
                }
                break;
            case 424:
                switch(_ch) {
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                case 110: // n
                    s = 425;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 111 && _ch <= 122) { // o - z
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 109) { // a - m
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Identifier;
                        return true;
                    }
                }
                break;
            case 425:
                switch(_ch) {
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 122) { // a - z
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Pattern;
                        return true;
                    }
                }
                break;
            case 426:
                switch(_ch) {
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                case 116: // t
                    s = 427;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 115) { // a - s
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 117 && _ch <= 122) { // u - z
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Identifier;
                        return true;
                    }
                }
                break;
            case 427:
                switch(_ch) {
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                case 111: // o
                    s = 428;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 112 && _ch <= 122) { // p - z
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 110) { // a - n
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Identifier;
                        return true;
                    }
                }
                break;
            case 428:
                switch(_ch) {
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 122) { // a - z
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Goto;
                        return true;
                    }
                }
                break;
            case 429:
                switch(_ch) {
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                case 112: // p
                    s = 444;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 113 && _ch <= 122) { // q - z
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 111) { // a - o
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Identifier;
                        return true;
                    }
                }
                break;
            case 430:
                switch(_ch) {
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                case 116: // t
                    s = 431;
                    _column++;
                    break;
                case 99: // c
                    s = 432;
                    _column++;
                    break;
                default:
                    if (_ch >= 97 && _ch <= 98) { // a - b
                        s = 365;
                        _column++;
                    } else if (_ch >= 117 && _ch <= 122) { // u - z
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 100 && _ch <= 115) { // d - s
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Identifier;
                        return true;
                    }
                }
                break;
            case 431:
                switch(_ch) {
                case 57: // 9
                    s = 365;
                    _column++;
                    break;
                case 55: // 7
                    s = 365;
                    _column++;
                    break;
                case 48: // 0
                    s = 365;
                    _column++;
                    break;
                case 50: // 2
                    s = 365;
                    _column++;
                    break;
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                case 49: // 1
                    s = 437;
                    _column++;
                    break;
                case 56: // 8
                    s = 438;
                    _column++;
                    break;
                case 51: // 3
                    s = 439;
                    _column++;
                    break;
                case 54: // 6
                    s = 440;
                    _column++;
                    break;
                default:
                    if (_ch >= 52 && _ch <= 53) { // 4 - 5
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 122) { // a - z
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Identifier;
                        return true;
                    }
                }
                break;
            case 432:
                switch(_ch) {
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                case 108: // l
                    s = 433;
                    _column++;
                    break;
                default:
                    if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 107) { // a - k
                        s = 365;
                        _column++;
                    } else if (_ch >= 109 && _ch <= 122) { // m - z
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Identifier;
                        return true;
                    }
                }
                break;
            case 433:
                switch(_ch) {
                case 117: // u
                    s = 434;
                    _column++;
                    break;
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 118 && _ch <= 122) { // v - z
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 116) { // a - t
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Identifier;
                        return true;
                    }
                }
                break;
            case 434:
                switch(_ch) {
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                case 100: // d
                    s = 435;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 101 && _ch <= 122) { // e - z
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 99) { // a - c
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Identifier;
                        return true;
                    }
                }
                break;
            case 435:
                switch(_ch) {
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                case 101: // e
                    s = 436;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 102 && _ch <= 122) { // f - z
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 100) { // a - d
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Identifier;
                        return true;
                    }
                }
                break;
            case 436:
                switch(_ch) {
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 122) { // a - z
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Include;
                        return true;
                    }
                }
                break;
            case 437:
                switch(_ch) {
                case 54: // 6
                    s = 443;
                    _column++;
                    break;
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                default:
                    if (_ch >= 55 && _ch <= 57) { // 7 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 48 && _ch <= 53) { // 0 - 5
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 122) { // a - z
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Identifier;
                        return true;
                    }
                }
                break;
            case 438:
                switch(_ch) {
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 122) { // a - z
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Int8;
                        return true;
                    }
                }
                break;
            case 439:
                switch(_ch) {
                case 50: // 2
                    s = 442;
                    _column++;
                    break;
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                default:
                    if (_ch >= 51 && _ch <= 57) { // 3 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 48 && _ch <= 49) { // 0 - 1
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 122) { // a - z
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Identifier;
                        return true;
                    }
                }
                break;
            case 440:
                switch(_ch) {
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                case 52: // 4
                    s = 441;
                    _column++;
                    break;
                default:
                    if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 53 && _ch <= 57) { // 5 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 48 && _ch <= 51) { // 0 - 3
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 122) { // a - z
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Identifier;
                        return true;
                    }
                }
                break;
            case 441:
                switch(_ch) {
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 122) { // a - z
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Int64;
                        return true;
                    }
                }
                break;
            case 442:
                switch(_ch) {
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 122) { // a - z
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Int32;
                        return true;
                    }
                }
                break;
            case 443:
                switch(_ch) {
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 122) { // a - z
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Int16;
                        return true;
                    }
                }
                break;
            case 444:
                switch(_ch) {
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                case 111: // o
                    s = 445;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 112 && _ch <= 122) { // p - z
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 110) { // a - n
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Identifier;
                        return true;
                    }
                }
                break;
            case 445:
                switch(_ch) {
                case 114: // r
                    s = 446;
                    _column++;
                    break;
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 115 && _ch <= 122) { // s - z
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 113) { // a - q
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Identifier;
                        return true;
                    }
                }
                break;
            case 446:
                switch(_ch) {
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                case 116: // t
                    s = 447;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 115) { // a - s
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 117 && _ch <= 122) { // u - z
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Identifier;
                        return true;
                    }
                }
                break;
            case 447:
                switch(_ch) {
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 122) { // a - z
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Import;
                        return true;
                    }
                }
                break;
            case 448:
                switch(_ch) {
                case 109: // m
                    s = 449;
                    _column++;
                    break;
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 110 && _ch <= 122) { // n - z
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 108) { // a - l
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Identifier;
                        return true;
                    }
                }
                break;
            case 449:
                switch(_ch) {
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                case 101: // e
                    s = 450;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 102 && _ch <= 122) { // f - z
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 100) { // a - d
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Identifier;
                        return true;
                    }
                }
                break;
            case 450:
                switch(_ch) {
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                case 115: // s
                    s = 451;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 116 && _ch <= 122) { // t - z
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 114) { // a - r
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Identifier;
                        return true;
                    }
                }
                break;
            case 451:
                switch(_ch) {
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                case 112: // p
                    s = 452;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 113 && _ch <= 122) { // q - z
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 111) { // a - o
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Identifier;
                        return true;
                    }
                }
                break;
            case 452:
                switch(_ch) {
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                case 97: // a
                    s = 453;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 98 && _ch <= 122) { // b - z
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Identifier;
                        return true;
                    }
                }
                break;
            case 453:
                switch(_ch) {
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                case 99: // c
                    s = 454;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 100 && _ch <= 122) { // d - z
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 98) { // a - b
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Identifier;
                        return true;
                    }
                }
                break;
            case 454:
                switch(_ch) {
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                case 101: // e
                    s = 455;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 102 && _ch <= 122) { // f - z
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 100) { // a - d
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Identifier;
                        return true;
                    }
                }
                break;
            case 455:
                switch(_ch) {
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 122) { // a - z
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Namespace;
                        return true;
                    }
                }
                break;
            case 456:
                switch(_ch) {
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                case 116: // t
                    s = 461;
                    _column++;
                    break;
                case 97: // a
                    s = 462;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 98 && _ch <= 115) { // b - s
                        s = 365;
                        _column++;
                    } else if (_ch >= 117 && _ch <= 122) { // u - z
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Identifier;
                        return true;
                    }
                }
                break;
            case 457:
                switch(_ch) {
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                case 97: // a
                    s = 458;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 98 && _ch <= 122) { // b - z
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Identifier;
                        return true;
                    }
                }
                break;
            case 458:
                switch(_ch) {
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                case 114: // r
                    s = 459;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 115 && _ch <= 122) { // s - z
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 113) { // a - q
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Identifier;
                        return true;
                    }
                }
                break;
            case 459:
                switch(_ch) {
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                case 116: // t
                    s = 460;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 115) { // a - s
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 117 && _ch <= 122) { // u - z
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Identifier;
                        return true;
                    }
                }
                break;
            case 460:
                switch(_ch) {
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 122) { // a - z
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Start;
                        return true;
                    }
                }
                break;
            case 461:
                switch(_ch) {
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 122) { // a - z
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Set;
                        return true;
                    }
                }
                break;
            case 462:
                switch(_ch) {
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                case 108: // l
                    s = 463;
                    _column++;
                    break;
                default:
                    if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 107) { // a - k
                        s = 365;
                        _column++;
                    } else if (_ch >= 109 && _ch <= 122) { // m - z
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Identifier;
                        return true;
                    }
                }
                break;
            case 463:
                switch(_ch) {
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                case 101: // e
                    s = 464;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 102 && _ch <= 122) { // f - z
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 100) { // a - d
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Identifier;
                        return true;
                    }
                }
                break;
            case 464:
                switch(_ch) {
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                case 100: // d
                    s = 465;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 101 && _ch <= 122) { // e - z
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 99) { // a - c
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Identifier;
                        return true;
                    }
                }
                break;
            case 465:
                switch(_ch) {
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 122) { // a - z
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Sealed;
                        return true;
                    }
                }
                break;
            case 466:
                switch(_ch) {
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                case 116: // t
                    s = 467;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 115) { // a - s
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 117 && _ch <= 122) { // u - z
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Identifier;
                        return true;
                    }
                }
                break;
            case 467:
                switch(_ch) {
                case 117: // u
                    s = 468;
                    _column++;
                    break;
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 118 && _ch <= 122) { // v - z
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 116) { // a - t
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Identifier;
                        return true;
                    }
                }
                break;
            case 468:
                switch(_ch) {
                case 114: // r
                    s = 469;
                    _column++;
                    break;
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 115 && _ch <= 122) { // s - z
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 113) { // a - q
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Identifier;
                        return true;
                    }
                }
                break;
            case 469:
                switch(_ch) {
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                case 110: // n
                    s = 470;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 111 && _ch <= 122) { // o - z
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 109) { // a - m
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Identifier;
                        return true;
                    }
                }
                break;
            case 470:
                switch(_ch) {
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 122) { // a - z
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Return;
                        return true;
                    }
                }
                break;
            case 471:
                switch(_ch) {
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                case 112: // p
                    s = 472;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 113 && _ch <= 122) { // q - z
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 111) { // a - o
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Identifier;
                        return true;
                    }
                }
                break;
            case 472:
                switch(_ch) {
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                case 101: // e
                    s = 473;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 102 && _ch <= 122) { // f - z
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 100) { // a - d
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Identifier;
                        return true;
                    }
                }
                break;
            case 473:
                switch(_ch) {
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 122) { // a - z
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Type;
                        return true;
                    }
                }
                break;
            case 474:
                switch(_ch) {
                case 114: // r
                    s = 475;
                    _column++;
                    break;
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 115 && _ch <= 122) { // s - z
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 113) { // a - q
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Identifier;
                        return true;
                    }
                }
                break;
            case 475:
                switch(_ch) {
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                case 100: // d
                    s = 476;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 101 && _ch <= 122) { // e - z
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 99) { // a - c
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Identifier;
                        return true;
                    }
                }
                break;
            case 476:
                switch(_ch) {
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 122) { // a - z
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Word;
                        return true;
                    }
                }
                break;
            case 477:
                switch(_ch) {
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                case 111: // o
                    s = 478;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 112 && _ch <= 122) { // p - z
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 110) { // a - n
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Identifier;
                        return true;
                    }
                }
                break;
            case 478:
                switch(_ch) {
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                case 114: // r
                    s = 479;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 115 && _ch <= 122) { // s - z
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 113) { // a - q
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Identifier;
                        return true;
                    }
                }
                break;
            case 479:
                switch(_ch) {
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                case 100: // d
                    s = 480;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 101 && _ch <= 122) { // e - z
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 99) { // a - c
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Identifier;
                        return true;
                    }
                }
                break;
            case 480:
                switch(_ch) {
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 122) { // a - z
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::DWord;
                        return true;
                    }
                }
                break;
            case 483:
                switch(_ch) {
                case 10: // {backslash}n
                    token = davelexer::TokenType::Char;
                    value += _ch;
                    _line++;
                    _column = 1;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                case 101: // e
                    token = davelexer::TokenType::CharClass;
                    value += _ch;
                    _column++;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                case 120: // x
                    s = 511;
                    _column++;
                    break;
                case 97: // a
                    token = davelexer::TokenType::CharClass;
                    value += _ch;
                    _column++;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                case 100: // d
                    token = davelexer::TokenType::CharClass;
                    value += _ch;
                    _column++;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                case 65: // A
                    token = davelexer::TokenType::CharClass;
                    value += _ch;
                    _column++;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                case 115: // s
                    token = davelexer::TokenType::CharClass;
                    value += _ch;
                    _column++;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                case 13: // {backslash}r
                    token = davelexer::TokenType::Char;
                    value += _ch;
                    _column = 1;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                default:
                    if (_ch >= 66 && _ch <= 96) { // B - `
                        token = davelexer::TokenType::Char;
                        value += _ch;
                        _column++;
                        end_line = _line;
                        end_column = _column;
                        _ch = _stm.get();
                        return true;
                    } else if (_ch >= 116 && _ch <= 119) { // t - w
                        token = davelexer::TokenType::Char;
                        value += _ch;
                        _column++;
                        end_line = _line;
                        end_column = _column;
                        _ch = _stm.get();
                        return true;
                    } else if (_ch >= 102 && _ch <= 114) { // f - r
                        token = davelexer::TokenType::Char;
                        value += _ch;
                        _column++;
                        end_line = _line;
                        end_column = _column;
                        _ch = _stm.get();
                        return true;
                    } else if (_ch >= 121 && _ch <= 2147483646) { // y - <end>
                        token = davelexer::TokenType::Char;
                        value += _ch;
                        _column++;
                        end_line = _line;
                        end_column = _column;
                        _ch = _stm.get();
                        return true;
                    } else if (_ch >= 98 && _ch <= 99) { // b - c
                        token = davelexer::TokenType::Char;
                        value += _ch;
                        _column++;
                        end_line = _line;
                        end_column = _column;
                        _ch = _stm.get();
                        return true;
                    } else if (_ch >= 0 && _ch <= 9) { // <start> - {backslash}t
                        token = davelexer::TokenType::Char;
                        value += _ch;
                        _column++;
                        end_line = _line;
                        end_column = _column;
                        _ch = _stm.get();
                        return true;
                    } else if (_ch >= 11 && _ch <= 12) { // {backslash}v - {backslash}f
                        token = davelexer::TokenType::Char;
                        value += _ch;
                        _column++;
                        end_line = _line;
                        end_column = _column;
                        _ch = _stm.get();
                        return true;
                    } else if (_ch >= 14 && _ch <= 64) { // {backslash}x14 - @
                        token = davelexer::TokenType::Char;
                        value += _ch;
                        _column++;
                        end_line = _line;
                        end_column = _column;
                        _ch = _stm.get();
                        return true;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Error;
                        return true;
                    }
                }
                break;
            case 495:
                switch(_ch) {
                case 10: // {backslash}n
                    token = davelexer::TokenType::Char;
                    value += _ch;
                    _line++;
                    _column = 1;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                case 101: // e
                    token = davelexer::TokenType::CharClass;
                    value += _ch;
                    _column++;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                case 120: // x
                    s = 500;
                    _column++;
                    break;
                case 97: // a
                    token = davelexer::TokenType::CharClass;
                    value += _ch;
                    _column++;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                case 100: // d
                    token = davelexer::TokenType::CharClass;
                    value += _ch;
                    _column++;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                case 65: // A
                    token = davelexer::TokenType::CharClass;
                    value += _ch;
                    _column++;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                case 115: // s
                    token = davelexer::TokenType::CharClass;
                    value += _ch;
                    _column++;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                case 13: // {backslash}r
                    token = davelexer::TokenType::Char;
                    value += _ch;
                    _column = 1;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                default:
                    if (_ch >= 66 && _ch <= 96) { // B - `
                        token = davelexer::TokenType::Char;
                        value += _ch;
                        _column++;
                        end_line = _line;
                        end_column = _column;
                        _ch = _stm.get();
                        return true;
                    } else if (_ch >= 116 && _ch <= 119) { // t - w
                        token = davelexer::TokenType::Char;
                        value += _ch;
                        _column++;
                        end_line = _line;
                        end_column = _column;
                        _ch = _stm.get();
                        return true;
                    } else if (_ch >= 102 && _ch <= 114) { // f - r
                        token = davelexer::TokenType::Char;
                        value += _ch;
                        _column++;
                        end_line = _line;
                        end_column = _column;
                        _ch = _stm.get();
                        return true;
                    } else if (_ch >= 121 && _ch <= 2147483646) { // y - <end>
                        token = davelexer::TokenType::Char;
                        value += _ch;
                        _column++;
                        end_line = _line;
                        end_column = _column;
                        _ch = _stm.get();
                        return true;
                    } else if (_ch >= 98 && _ch <= 99) { // b - c
                        token = davelexer::TokenType::Char;
                        value += _ch;
                        _column++;
                        end_line = _line;
                        end_column = _column;
                        _ch = _stm.get();
                        return true;
                    } else if (_ch >= 0 && _ch <= 9) { // <start> - {backslash}t
                        token = davelexer::TokenType::Char;
                        value += _ch;
                        _column++;
                        end_line = _line;
                        end_column = _column;
                        _ch = _stm.get();
                        return true;
                    } else if (_ch >= 11 && _ch <= 12) { // {backslash}v - {backslash}f
                        token = davelexer::TokenType::Char;
                        value += _ch;
                        _column++;
                        end_line = _line;
                        end_column = _column;
                        _ch = _stm.get();
                        return true;
                    } else if (_ch >= 14 && _ch <= 64) { // {backslash}x14 - @
                        token = davelexer::TokenType::Char;
                        value += _ch;
                        _column++;
                        end_line = _line;
                        end_column = _column;
                        _ch = _stm.get();
                        return true;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Error;
                        return true;
                    }
                }
                break;
            case 500:
                switch(_ch) {
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 501;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 70) { // A - F
                        s = 501;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 102) { // a - f
                        s = 501;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Error;
                        return true;
                    }
                }
                break;
            case 501:
                switch(_ch) {
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 502;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 70) { // A - F
                        s = 502;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 102) { // a - f
                        s = 502;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Error;
                        return true;
                    }
                }
                break;
            case 502:
                switch(_ch) {
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 503;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 70) { // A - F
                        s = 503;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 102) { // a - f
                        s = 503;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Error;
                        return true;
                    }
                }
                break;
            case 503:
                switch(_ch) {
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        token = davelexer::TokenType::Char;
                        value += _ch;
                        _column++;
                        end_line = _line;
                        end_column = _column;
                        _ch = _stm.get();
                        return true;
                    } else if (_ch >= 65 && _ch <= 70) { // A - F
                        token = davelexer::TokenType::Char;
                        value += _ch;
                        _column++;
                        end_line = _line;
                        end_column = _column;
                        _ch = _stm.get();
                        return true;
                    } else if (_ch >= 97 && _ch <= 102) { // a - f
                        token = davelexer::TokenType::Char;
                        value += _ch;
                        _column++;
                        end_line = _line;
                        end_column = _column;
                        _ch = _stm.get();
                        return true;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Error;
                        return true;
                    }
                }
                break;
            case 504:
                switch(_ch) {
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 34;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Number;
                        return true;
                    }
                }
                break;
            case 508:
                switch(_ch) {
                case 95: // _
                    s = 24;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 24;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 24;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 122) { // a - z
                        s = 24;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Identifier;
                        return true;
                    }
                }
                break;
            case 511:
                switch(_ch) {
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 512;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 70) { // A - F
                        s = 512;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 102) { // a - f
                        s = 512;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Error;
                        return true;
                    }
                }
                break;
            case 512:
                switch(_ch) {
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 513;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 70) { // A - F
                        s = 513;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 102) { // a - f
                        s = 513;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Error;
                        return true;
                    }
                }
                break;
            case 513:
                switch(_ch) {
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 514;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 70) { // A - F
                        s = 514;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 102) { // a - f
                        s = 514;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Error;
                        return true;
                    }
                }
                break;
            case 514:
                switch(_ch) {
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        token = davelexer::TokenType::Char;
                        value += _ch;
                        _column++;
                        end_line = _line;
                        end_column = _column;
                        _ch = _stm.get();
                        return true;
                    } else if (_ch >= 65 && _ch <= 70) { // A - F
                        token = davelexer::TokenType::Char;
                        value += _ch;
                        _column++;
                        end_line = _line;
                        end_column = _column;
                        _ch = _stm.get();
                        return true;
                    } else if (_ch >= 97 && _ch <= 102) { // a - f
                        token = davelexer::TokenType::Char;
                        value += _ch;
                        _column++;
                        end_line = _line;
                        end_column = _column;
                        _ch = _stm.get();
                        return true;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Error;
                        return true;
                    }
                }
                break;
            case 515:
                switch(_ch) {
                case 13: // {backslash}r
                    s = 303;
                    _column = 1;
                    break;
                case 2147483647: // <eod>
                    token = davelexer::TokenType::Comment;
                    value += _ch;
                    _column++;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                case 10: // {backslash}n
                    token = davelexer::TokenType::Comment;
                    value += _ch;
                    _line++;
                    _column = 1;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                case 47: // /
                    s = 516;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 2147483646) { // 0 - <end>
                        s = 303;
                        _column++;
                    } else if (_ch >= 0 && _ch <= 9) { // <start> - {backslash}t
                        s = 303;
                        _column++;
                    } else if (_ch >= 11 && _ch <= 12) { // {backslash}v - {backslash}f
                        s = 303;
                        _column++;
                    } else if (_ch >= 14 && _ch <= 46) { // {backslash}x14 - .
                        s = 303;
                        _column++;
                    }
                }
                break;
            case 516:
                switch(_ch) {
                case 13: // {backslash}r
                    s = 335;
                    _column = 1;
                    break;
                case 2147483647: // <eod>
                    token = davelexer::TokenType::Documentation;
                    value += _ch;
                    _column++;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                case 47: // /
                    s = 314;
                    _column++;
                    break;
                case 10: // {backslash}n
                    token = davelexer::TokenType::Documentation;
                    value += _ch;
                    _line++;
                    _column = 1;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                default:
                    if (_ch >= 48 && _ch <= 2147483646) { // 0 - <end>
                        s = 335;
                        _column++;
                    } else if (_ch >= 0 && _ch <= 9) { // <start> - {backslash}t
                        s = 335;
                        _column++;
                    } else if (_ch >= 11 && _ch <= 12) { // {backslash}v - {backslash}f
                        s = 335;
                        _column++;
                    } else if (_ch >= 14 && _ch <= 46) { // {backslash}x14 - .
                        s = 335;
                        _column++;
                    }
                }
                break;
            case 517:
                switch(_ch) {
                case 2147483647: // <eod>
                    token = davelexer::TokenType::Error;
                    value += _ch;
                    _column++;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                case 10: // {backslash}n
                    token = davelexer::TokenType::Comment;
                    value += _ch;
                    _line++;
                    _column = 1;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                case 47: // /
                    token = davelexer::TokenType::Comment;
                    _states.pop_back();
                    value += _ch;
                    _column++;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                case 42: // *
                    s = 518;
                    _column++;
                    break;
                case 13: // {backslash}r
                    token = davelexer::TokenType::Comment;
                    value += _ch;
                    _column = 1;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                default:
                    if (_ch >= 48 && _ch <= 2147483646) { // 0 - <end>
                        token = davelexer::TokenType::Comment;
                        value += _ch;
                        _column++;
                        end_line = _line;
                        end_column = _column;
                        _ch = _stm.get();
                        return true;
                    } else if (_ch >= 43 && _ch <= 46) { // + - .
                        token = davelexer::TokenType::Comment;
                        value += _ch;
                        _column++;
                        end_line = _line;
                        end_column = _column;
                        _ch = _stm.get();
                        return true;
                    } else if (_ch >= 0 && _ch <= 9) { // <start> - {backslash}t
                        token = davelexer::TokenType::Comment;
                        value += _ch;
                        _column++;
                        end_line = _line;
                        end_column = _column;
                        _ch = _stm.get();
                        return true;
                    } else if (_ch >= 11 && _ch <= 12) { // {backslash}v - {backslash}f
                        token = davelexer::TokenType::Comment;
                        value += _ch;
                        _column++;
                        end_line = _line;
                        end_column = _column;
                        _ch = _stm.get();
                        return true;
                    } else if (_ch >= 14 && _ch <= 41) { // {backslash}x14 - )
                        token = davelexer::TokenType::Comment;
                        value += _ch;
                        _column++;
                        end_line = _line;
                        end_column = _column;
                        _ch = _stm.get();
                        return true;
                    }
                }
                break;
            case 518:
                switch(_ch) {
                case 47: // /
                    token = davelexer::TokenType::Comment;
                    _states.pop_back();
                    value += _ch;
                    _column++;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                case 10: // {backslash}n
                    token = davelexer::TokenType::Comment;
                    value += _ch;
                    _line++;
                    _column = 1;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                case 2147483647: // <eod>
                    token = davelexer::TokenType::Error;
                    value += _ch;
                    _column++;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                case 42: // *
                    s = 518;
                    _column++;
                    break;
                case 13: // {backslash}r
                    token = davelexer::TokenType::Comment;
                    value += _ch;
                    _column = 1;
                    end_line = _line;
                    end_column = _column;
                    _ch = _stm.get();
                    return true;
                default:
                    if (_ch >= 48 && _ch <= 2147483646) { // 0 - <end>
                        token = davelexer::TokenType::Comment;
                        value += _ch;
                        _column++;
                        end_line = _line;
                        end_column = _column;
                        _ch = _stm.get();
                        return true;
                    } else if (_ch >= 43 && _ch <= 46) { // + - .
                        token = davelexer::TokenType::Comment;
                        value += _ch;
                        _column++;
                        end_line = _line;
                        end_column = _column;
                        _ch = _stm.get();
                        return true;
                    } else if (_ch >= 0 && _ch <= 9) { // <start> - {backslash}t
                        token = davelexer::TokenType::Comment;
                        value += _ch;
                        _column++;
                        end_line = _line;
                        end_column = _column;
                        _ch = _stm.get();
                        return true;
                    } else if (_ch >= 11 && _ch <= 12) { // {backslash}v - {backslash}f
                        token = davelexer::TokenType::Comment;
                        value += _ch;
                        _column++;
                        end_line = _line;
                        end_column = _column;
                        _ch = _stm.get();
                        return true;
                    } else if (_ch >= 14 && _ch <= 41) { // {backslash}x14 - )
                        token = davelexer::TokenType::Comment;
                        value += _ch;
                        _column++;
                        end_line = _line;
                        end_column = _column;
                        _ch = _stm.get();
                        return true;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Comment;
                        return true;
                    }
                }
                break;
            case 519:
                switch(_ch) {
                case 117: // u
                    s = 520;
                    _column++;
                    break;
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 118 && _ch <= 122) { // v - z
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 116) { // a - t
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Identifier;
                        return true;
                    }
                }
                break;
            case 520:
                switch(_ch) {
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                case 109: // m
                    s = 521;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 110 && _ch <= 122) { // n - z
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 108) { // a - l
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Identifier;
                        return true;
                    }
                }
                break;
            case 521:
                switch(_ch) {
                case 95: // _
                    s = 365;
                    _column++;
                    break;
                default:
                    if (_ch >= 48 && _ch <= 57) { // 0 - 9
                        s = 365;
                        _column++;
                    } else if (_ch >= 65 && _ch <= 90) { // A - Z
                        s = 365;
                        _column++;
                    } else if (_ch >= 97 && _ch <= 122) { // a - z
                        s = 365;
                        _column++;
                    }
                    else {
                        // Yield
                        end_line = _line;
                        end_column = _column;
                        token = davelexer::TokenType::Enum;
                        return true;
                    }
                }
                break;
            }
            value += _ch;
            _ch = _stm.get();
        }
    }
}
